//: [Previous](@previous)

import Foundation

// 1. Есть словарь с видами чая и их стоимостью. Есть очередь людей, которые хотят заказать чай (можно представить её в виде массива видов чая, которые хотят заказать).
//Необходимо последовательно выводить в консоль сколько заплатит покупатель (необходимо вывести его номер по порядку, чай, который он заказал, и стоимость).
enum Tea {
    case black
    case green_
    case white
    case fruit
}

let dictionaryTea: [ String : Int ] = ["Черный чай": 100,
                                       "Зеленый чай" : 150,
                                       "Фруктовый чай" : 110,
                                       "Мятный чай" : 89]

let queueForTea: [String] = ["Черный чай",
                             "Фруктовый чай",
                             "Зеленый чай",
                             "Мятный чай"]

func printTeaBuyers(tea: [String:Int], array: [String]) {
    var n = 0
    array.forEach { i in
        n += 1
        print("покупатель № \(n) заплатит за for \(i) - \(tea[i]!)")}
}

printTeaBuyers(tea: dictionaryTea, array: queueForTea)


// 2. Есть массив [-4, 5, 10, nil, 4, nil, 25, 0, nil, 16, 75, -20, -7, 15, 0, nil]. Необходимо создать новый массив, который будет состоять из элементов старого, но не должно быть nil, не должно быть 0 и 4, а также массив должен быть отсортирован по возрастанию.

let arrayOne: [Int?] = [-4, 5, 10, nil, 4, nil, 25, 0, nil, 16, 75, -20, -7, 15, 0, nil]
let arrayTwo = arrayOne.compactMap{($0)}.filter({$0 != 0 && $0 != 4}).sorted()

// 3. Написать функцию, которая на вход принимает целое число, а возвращает массив, который сформирован по следующим правилам: количество элементов соответствует переданному числу, массив начинается с 1, каждый последующий элемент больше предыдущего в 2 раза.

func createArray(number: Int) -> [Int] {
    var array: [Int] = [1]
    for i in 0 ..< number - 1 {
        array.append(array[i] * 2)
    }
    return array
}

createArray(number: 6)
